export type AvailableSQLTypes = (typeof availableSQLTypes)[number];
export const availableSQLTypes = [
   "int2",
   "_int2",
   "int4",
   "_int4",
   "varchar",
   "text",
   "bool",
   "timestamp",
   "timestamptz",
   "json",
   "jsonb",
   "uuid",
   "date",
   "time",
   "timetz",
   "interval",
   "numeric",
   "float4",
   "float8",
   "decimal",
   "int8",
   "bpchar",
   "char",
   "bit",
   "_text",
] as const;
export type SQLType = (typeof availableSQLTypes)[number];

export const DatatypeToJavascript = {
   _int2: "array",
   _int4: "array",
   _text: "array",
   bit: "string",
   bool: "boolean",
   bpchar: "string",
   char: "string",
   date: "date",
   float4: "number",
   float8: "number",
   int2: "number",
   int4: "number",
   int8: "number",
   interval: "string",
   json: "json",
   jsonb: "json",
   decimal: "number",
   numeric: "number",
   text: "string",
   time: "string",
   timestamp: "date",
   timestamptz: "date",
   timetz: "string",
   uuid: "string",
   varchar: "string",
} as const satisfies Record<SQLType, string>;

export const DatatypeToTypescript: Record<SQLType, string> = {
   _int2: "Array<number>",
   _int4: "Array<number>",
   _text: "Array<string>",
   bit: "string",
   bool: "boolean",
   bpchar: "string",
   char: "string",
   date: "Date",
   float4: "number",
   float8: "number",
   int2: "number",
   int4: "number",
   int8: "number",
   interval: "string",
   json: "Record<string, unknown>",
   jsonb: "Record<string, unknown>",
   decimal: "number",
   numeric: "number",
   text: "string",
   time: "string",
   timestamp: "Date",
   timestamptz: "Date",
   timetz: "string",
   uuid: "string",
   varchar: "string",
};

export const DatatypeToZodObject: Record<SQLType, string> = {
   _int2: "z.array(z.number())",
   _int4: "z.array(z.number())",
   _text: "z.array(z.string())",
   bit: "z.string()",
   bool: "z.boolean()",
   bpchar: "z.string()",
   char: "z.string()",
   date: "z.date()",
   float4: "z.number()",
   float8: "z.number()",
   int2: "z.number().int()",
   int4: "z.number().int()",
   int8: "z.number().int()",
   interval: "z.string()",
   json: "z.record(z.string(), z.unknown())",
   jsonb: "z.record(z.string(), z.unknown())",
   decimal: "z.number()",
   numeric: "z.number()",
   text: "z.string()",
   time: "z.string()",
   timestamp: "z.date()",
   timestamptz: "z.date()",
   timetz: "z.string()",
   uuid: "z.string()",
   varchar: "z.string()",
};
